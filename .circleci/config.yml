version: 2.1
commands:
  install_rust:
    steps:
      - run:
          name: Install rust
          command: |
            curl --proto '=https' --tlsv1.2 -sSf -o rustup.sh https://sh.rustup.rs
            chmod 755 rustup.sh
            ./rustup.sh -y
            . /root/.cargo/env
            cat /root/.cargo/env >> $BASH_ENV
            rustup default nightly
            rustup target add x86_64-unknown-linux-musl
            rustup component add rustfmt
  cargo_build:
    parameters:
      flags:
        type: string
        default: ""
      debug_binary:
        type: string
        default: "target/debug/ingraind"
      release_binary:
        type: string
        default: "target/release/ingraind"
    steps:
      - run:
          name: Build
          command: |
              mkdir /build/binaries
              cargo build << parameters.flags >> || exit 1
              cp << parameters.debug_binary >> /build/binaries/ingraind-debug
              if [ ${CIRCLE_BRANCH} = "master" ]; then
                cargo test << parameters.flags >> --release || exit 1
                cargo build << parameters.flags >> --release || exit 1
                cp << parameters.release_binary >> /build/binaries/ingraind
              else
                cargo test << parameters.flags >> || exit 1
              fi
      - store_artifacts:
          path: /build/binaries
          destination: ingraind-binaries

jobs:
  terraform:
    parameters:
      ami:
        type: string
        default: "latest"
    working_directory: /build
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/workspace
      - run:
          name: Deploy
          command: |
            cd terraform
            ./run-test.sh << parameters.ami >>

  ubuntu:
    parameters:
      tag:
        type: string
        default: "latest"
      kernel_version:
        type: string
        default: "$(uname -r)"
    working_directory: /build
    docker:
      - image: ubuntu:<< parameters.tag >>
    steps:
      - checkout
      - attach_workspace:
          at: /build

      - run:
          name: Install some deps
          command: |
            apt-get update
            apt-get install -y curl wget gnupg2 software-properties-common lsb-release

      - run:
          name: Configure llvm 9 repo
          command: |
            curl https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
            add-apt-repository 'deb http://apt.llvm.org/bionic/   llvm-toolchain-bionic-9  main'

      - run:
          name: Install more deps
          command: |
            apt-get update
            apt-get install -y clang llvm llvm-9 musl-tools capnproto libelf-dev linux-headers-<< parameters.kernel_version >> ca-certificates{,-java}

      - install_rust

      - cargo_build:
          flags: --target=x86_64-unknown-linux-musl
          debug_binary: target/x86_64-unknown-linux-musl/debug/ingraind
          release_binary: target/x86_64-unknown-linux-musl/release/ingraind

      - run:
          name: Persist binaries
          command: |
            mkdir -p /tmp/workspace/bin
            if [ ${CIRCLE_BRANCH} = "master" ]; then
              cp target/x86_64-unknown-linux-musl/release/ingraind \
                /tmp/workspace/bin/ingraind-ubuntu-$(echo "<< parameters.tag >>" | sed 's/\.//')
            fi

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - bin

  fedora:
    working_directory: /build
    docker:
      - image: fedora:31
    steps:
      - checkout
      - attach_workspace:
          at: /build

      - run:
          name: Install deps
          command: |
            yum install -y clang-9.0.0-1.fc31 llvm-9.0.0-1.fc31 capnproto kernel kernel-devel elfutils-libelf-devel ca-certificates

      - install_rust

      - run:
          name: Configure env vars
          command: |
            echo export KERNEL_SOURCE=/usr/src/kernels/$(rpm -qa kernel-devel |cut -d- -f3-)/ >> $BASH_ENV
            echo export LLC=llc >> $BASH_ENV

      - cargo_build

      - run:
          name: Persist binaries
          command: |
            mkdir -p /tmp/workspace/bin
            if [ ${CIRCLE_BRANCH} = "master" ]; then
              cp target/release/ingraind \
                /tmp/workspace/bin/ingraind-fedora-31
            fi

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - bin

  gke:
    working_directory: /build
    docker:
      - image: ubuntu
    steps:
      - checkout
      - attach_workspace:
          at: /build

      - run:
          name: Install some deps
          command: |
            apt-get update
            apt-get install -y curl wget gnupg2 software-properties-common lsb-release

      - run:
          name: Configure llvm 9 repo
          command: |
            curl https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
            add-apt-repository 'deb http://apt.llvm.org/bionic/   llvm-toolchain-bionic-9  main'

      - run:
          name: Install more deps
          command: |
            apt-get update
            apt-get install -y build-essential bc kmod cpio flex cpio libncurses5-dev
            apt-get install -y clang llvm llvm-9 musl-tools capnproto libelf-dev ca-certificates{,-java}

      - run:
          name: Configure kernel tree
          command: |
            mkdir cos-kernel && cd cos-kernel
            wget -O kernel.tgz https://chromium.googlesource.com/chromiumos/third_party/kernel/+archive/8549f18963962124c0f0d73667e59dbfc17c5218.tar.gz
            tar -xf kernel.tgz
            zcat /build/tests/config-gke-4.14.138+.gz > .config
            make olddefconfig
            make prepare
            echo export KERNEL_SOURCE=/build/cos-kernel >> $BASH_ENV
            cd ..

      - install_rust

      - cargo_build:
          flags: --target=x86_64-unknown-linux-musl
          debug_binary: target/x86_64-unknown-linux-musl/debug/ingraind
          release_binary: target/x86_64-unknown-linux-musl/release/ingraind

  build_docker_image:
    environment:
      CONTAINER_NAME: "quay.io/redsift/ingraind"

    working_directory: /build
    docker:
      - image: docker:latest
    steps:
      - checkout
      - attach_workspace:
          at: /build

      - setup_remote_docker

      - run:
          name: Login to a regsitry
          command: |
            echo ${QUAY_PASS} | docker login --username ${QUAY_USER} --password-stdin quay.io

      - run:
          name: Build Docker image
          command: |
            export TAG=${CIRCLE_TAG:-unknown}
            export SHA=${CIRCLE_SHA1:0:7}

            cd /build
            cp /build/target/x86_64-unknown-linux-musl/release/ingraind .
            docker build --build-arg BINARY_PATH=./ingraind \
                   -f docker/Dockerfile.static \
                   -t $CONTAINER_NAME:latest \
                   -t $CONTAINER_NAME:$SHA \
                   /build

            echo "Total sizes"
            docker images $CONTAINER_NAME
            docker push $CONTAINER_NAME

  build_docker_binary:
    working_directory: /build
    docker:
      - image: quay.io/redsift/ingraind-build:latest
    steps:
      - checkout
      - attach_workspace:
          at: /build

      - run:
          name: Build static binary
          command: |
            cargo test --target=x86_64-unknown-linux-musl --release || exit 1
            cargo build --target=x86_64-unknown-linux-musl --release || exit 1

      - persist_to_workspace:
          root: "./"
          paths:
            - "target"

      - store_artifacts:
          path: /build/target/x86_64-unknown-linux-musl/release/ingraind
          destination: ingraind

workflows:
  version: 2.1
  build:
    jobs:
      - terraform:
          name: 'terraform - ubuntu 18.04'
          ami: 'ubuntu-1804'
          requires:
            - ubuntu 18.04
          filters:
            branches:
              only:
                - master

      - terraform:
          name: 'terraform - fedora 31'
          ami: 'fedora-31'
          requires:
            - fedora 31
          filters:
            branches:
              only:
                - master

      - ubuntu:
          name: "ubuntu 18.04"
          tag: "18.04"

      - fedora:
          name: "fedora 31"

      - gke

      - build_docker_binary:
          name: build_docker_binary

      - build_docker_image:
          requires:
            - build_docker_binary
